// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package yarpcthrift

import (
	"bytes"
	"context"
	"fmt"

	"go.uber.org/thriftrw/envelope"
	"go.uber.org/thriftrw/protocol"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc/v2"
	"go.uber.org/yarpc/v2/yarpcencoding"
	"go.uber.org/yarpc/v2/yarpcprocedure"
	"go.uber.org/yarpc/v2/yarpcthrift/internal"
)

// Client is a generic Thrift client. It speaks in raw Thrift payloads.
//
// Users should use the client generated by the code generator rather than
// using this directly.
type Client interface {
	// Call the given Thrift method.
	Call(ctx context.Context, reqBody envelope.Enveloper, opts ...yarpc.CallOption) (wire.Value, error)
}

// New creates a new Thrift client.
func New(c *yarpc.Client, service string, opts ...ClientOption) Client {
	// TODO(mhp): Update comments here once we finalize v2.
	//
	// Code generated for Thrift client instantiation will probably be something
	// like this:
	//
	// 	func New(tc thrift.Client, opts ...ClientOption) *MyServiceClient {
	// 		c := thrift.New(
	// 			Client: tc,
	// 			Service: "MyService",
	// 			opts...)
	// 		return &MyServiceClient{client: c}
	// 	}
	//
	// So Config is really the internal config as far as consumers of the
	// generated client are concerned.

	var cc clientConfig
	for _, opt := range opts {
		opt.applyClientOption(&cc)
	}

	p := protocol.Binary
	if cc.Protocol != nil {
		p = cc.Protocol
	}

	if cc.Multiplexed {
		p = multiplexedOutboundProtocol{
			Protocol: p,
			Service:  c.Service,
		}
	}

	return thriftClient{
		p:             p,
		c:             c,
		thriftService: service,
		Enveloping:    cc.Enveloping,
	}
}

type thriftClient struct {
	c *yarpc.Client
	p protocol.Protocol

	// name of the Thrift service
	thriftService string
	Enveloping    bool
}

func (c thriftClient) Call(ctx context.Context, reqBody envelope.Enveloper, opts ...yarpc.CallOption) (wire.Value, error) {
	// Code generated for Thrift client calls will probably be something like
	// this:
	//
	// 	func (c *MyServiceClient) someMethod(ctx context.Context, arg1 Arg1Type, arg2 arg2Type, opts ...yarpc.CallOption) (returnValue, error) {
	// 		args := myservice.SomeMethodHelper.Args(arg1, arg2)
	// 		resBody, err := c.client.Call(ctx, args, opts...)
	// 		var result myservice.SomeMethodResult
	// 		if err = result.FromWire(resBody); err != nil {
	// 			return nil, err
	// 		}
	// 		success, err := myservice.SomeMethodHelper.UnwrapResponse(&result)
	// 		return success, err
	// 	}
	treq, reqBuf, proto, err := c.buildTransportRequest(reqBody)
	if err != nil {
		return wire.Value{}, err
	}

	call := yarpc.NewOutboundCall(opts...)
	ctx, err = call.WriteToRequest(ctx, treq)
	if err != nil {
		return wire.Value{}, err
	}

	tres, tresBuf, err := c.c.Unary.Call(ctx, treq, reqBuf)
	if err != nil {
		return wire.Value{}, err
	}

	if _, err = call.ReadFromResponse(ctx, tres); err != nil {
		return wire.Value{}, err
	}

	// TODO(mhp): This will be unnecessary when `yarpc.Buffer` implements `io.ReaderAt`
	reader := bytes.NewReader(tresBuf.Bytes())

	envelope, err := proto.DecodeEnveloped(reader)
	if err != nil {
		return wire.Value{}, yarpcencoding.ResponseBodyDecodeError(treq, err)
	}

	switch envelope.Type {
	case wire.Reply:
		return envelope.Value, nil
	case wire.Exception:
		var exc internal.TApplicationException
		if err := exc.FromWire(envelope.Value); err != nil {
			return wire.Value{}, yarpcencoding.ResponseBodyDecodeError(treq, err)
		}
		return wire.Value{}, thriftException{
			Service:   treq.Service,
			Procedure: treq.Procedure,
			Reason:    &exc,
		}
	default:
		return wire.Value{}, yarpcencoding.ResponseBodyDecodeError(
			treq, errUnexpectedEnvelopeType(envelope.Type))
	}
}

func (c thriftClient) buildTransportRequest(reqBody envelope.Enveloper) (*yarpc.Request, *yarpc.Buffer, protocol.Protocol, error) {
	proto := c.p
	if !c.Enveloping {
		proto = disableEnvelopingProtocol{
			Protocol: proto,
			Type:     wire.Reply, // we only decode replies with this instance
		}
	}

	treq := &yarpc.Request{
		Caller:    c.c.Caller,
		Service:   c.c.Service,
		Encoding:  Encoding,
		Procedure: yarpcprocedure.ToName(c.thriftService, reqBody.MethodName()),
	}

	value, err := reqBody.ToWire()
	if err != nil {
		// ToWire validates the request. If it failed, we should return the error
		// as-is because it's not an encoding error.
		return nil, nil, nil, err
	}

	reqEnvelopeType := reqBody.EnvelopeType()
	if reqEnvelopeType != wire.Call {
		return nil, nil, nil, yarpcencoding.RequestBodyEncodeError(
			treq, errUnexpectedEnvelopeType(reqEnvelopeType),
		)
	}

	reqBuf := yarpc.Buffer{}
	err = proto.EncodeEnveloped(wire.Envelope{
		Name:  reqBody.MethodName(),
		Type:  reqEnvelopeType,
		SeqID: 1, // don't care
		Value: value,
	}, &reqBuf)
	if err != nil {
		return nil, nil, nil, yarpcencoding.RequestBodyEncodeError(treq, err)
	}

	return treq, &reqBuf, proto, nil
}

type thriftException struct {
	Service   string
	Procedure string
	Reason    *internal.TApplicationException
}

func (e thriftException) Error() string {
	return fmt.Sprintf(
		"thrift request to procedure %q of service %q encountered an internal failure: %v",
		e.Procedure, e.Service, e.Reason)
}
